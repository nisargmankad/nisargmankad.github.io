@using MyPortfolio.Models
@inject HttpClient Http
@inject IJSRuntime JS

<!-- Components/GitHubActivity.razor -->
<div class="card border-0 github-card">
  <div class="d-flex align-items-center justify-content-between mb-2">
    <h2 class="h5 mb-0">GitHub Activity</h2>
    <a class="small text-muted" target="_blank" rel="noopener"
       href=@($"https://github.com/nisargmankad")>@Username</a>
  </div>

  <!-- Reduced height for a more compact chart -->
  <div style="height: 180px;">
    <canvas id="@_canvasId" width="800" height="180"></canvas>
  </div>

  @if (!string.IsNullOrEmpty(_error))
  {
    <div class="alert alert-warning mt-3">@_error</div>
  }
</div>

@code {
  [Parameter] public string Username { get; set; } = "nisargmankad";
  [Parameter] public int Days { get; set; } = 90; // history window

  private readonly string _canvasId = $"gh-activity-{Guid.NewGuid():N}";
  private string? _error;
  private CancellationTokenSource _cts = new();

  protected override async Task OnInitializedAsync()
  {
    try
    {
      // GitHub API requires a User-Agent header for browser requests
      if (!Http.DefaultRequestHeaders.UserAgent.Any())
      {
        Http.DefaultRequestHeaders.UserAgent.ParseAdd("MyPortfolioApp/1.0");
      }
      Http.DefaultRequestHeaders.Accept.ParseAdd("application/vnd.github+json");

      // We’ll fetch up to 3 pages x 100 events (most recent)
      var maxPages = 3;
      var allEvents = new List<GithubEvent>();

      for (var page = 1; page <= maxPages; page++)
      {
        var url = $"https://api.github.com/users/{Username}/events?per_page=100&page={page}";
        var pageEvents = await Http.GetFromJsonAsync<List<GithubEvent>>(url, _cts.Token);
        if (pageEvents == null || pageEvents.Count == 0) break;
        allEvents.AddRange(pageEvents);
      }

      // Aggregate commits per day for the last N days
      var endDate = DateTime.UtcNow.Date;
      var startDate = endDate.AddDays(-Days + 1);

      var daily = new Dictionary<DateTime, int>();
      for (var d = startDate; d <= endDate; d = d.AddDays(1))
        daily[d] = 0;

      foreach (var ev in allEvents)
      {
        if (ev.type != "PushEvent") continue;
        var day = ev.created_at.ToUniversalTime().Date;
        if (day < startDate || day > endDate) continue;

        var commitCount = ev.payload?.size
                          ?? ev.payload?.commits?.Count
                          ?? 0;

        if (daily.ContainsKey(day))
          daily[day] += commitCount;
      }

      var labels = new List<string>();
      var values = new List<int>();
      for (var d = startDate; d <= endDate; d = d.AddDays(1))
      {
        labels.Add(d.ToString("MMM d"));   // e.g., “Aug 10”
        values.Add(daily[d]);
      }

      await JS.InvokeVoidAsync("chartInterop.renderLineChart", _canvasId, labels, values);
    }
    catch (HttpRequestException)
    {
      _error = "Couldn’t reach GitHub API. Try again later.";
    }
    catch (TaskCanceledException)
    {
      _error = "Request canceled.";
    }
    catch (Exception ex)
    {
      _error = $"Unexpected error: {ex.Message}";
    }
  }

  public void Dispose()
  {
    _cts.Cancel();
    _cts.Dispose();
  }
}
